[{"name": "app.py", "content": "\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom shiny import App, reactive, render, ui\nimport shinyswatch\n \nchoices = {\"a\": \"Eenzijdig rechts\", \"b\": \"Eenzijdig links\", \"c\": \"Tweezijdig\"}\n\napp_ui = ui.page_fluid(\n    # theme\n    #shinyswatch.theme_picker_ui(),\n    ui.panel_title(\"Hypothesetest met proporties\"),\n    \n    \n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_numeric(\"n\", \"Steekproefgrootte\", 40),\n            ui.input_slider(\"p_observed\", \"Geobserveerde steekproefproportie\", value=0.5, min=0, max=1),\n            ui.input_slider(\"p_0\", \"Nulhypothese : p_0 = \", value=0.5, min=0, max=1),\n            ui.input_numeric(\"n_sim\", \"Aantal simulaties onder nulhypothese\", 1000),\n            ui.input_radio_buttons(\"rb1\", \"Type test\", choices),\n        ),\n        ui.panel_main(\n            ui.row(\n                ui.column(8, \n                          ui.output_plot(\"histogram\"),\n                          ui.input_switch(\"x2\", \"Verander naar proporties\")\n                          ),\n                ui.column(4,\n                     ui.output_text(\"txt1\"),\n                     ui.output_text(\"empirical_p\"),\n                ),\n            ),\n            \n            ui.row(\n                ui.column(12, ui.output_data_frame(\"out\")),\n            ),   \n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n    shinyswatch.theme.minty()\n\n    @reactive.Calc\n    def drempelwaarde():\n        distance = abs(input.p_0() - input.p_observed())\n        if input.rb1() == 'a' :\n            return [input.n()*input.p_observed()]\n        elif input.rb1() == 'b':\n            return [input.n()*input.p_observed()]\n        elif input.rb1() == \"c\":\n            return [input.n()*(input.p_0() - distance), input.n()*(input.p_0() + distance)]\n\n\n    @output\n    @render.text\n    def txt1():\n        if len(drempelwaarde()) == 2:\n            return f'Drempelwaarden zijn {np.round(drempelwaarde()[0])} en {np.round(drempelwaarde()[1])}'\n        else:\n            return f'Drempelwaarde is {np.round(drempelwaarde()[0])}'\n        \n    \n    @reactive.Calc\n    def vlag_conditie():\n        \"\"\"\n        Returns the condition based on the selected radio button. d is treshold value in dataset and differs for \n        left, right and two sided test. Two sided test has two thresholds.\n\n        If the radio button 'a' is selected, the condition is 'x >= d'.\n        If the radio button 'b' is selected, the condition is 'x <= d'.\n        If button c is selected, the condition is 'x <= d[0]) | (x >= d[1]' where first is lower treshold and second is upper treshold.\n\n        Returns:\n            str: The condition based on the selected radio button.\n        \"\"\"\n        if input.rb1() == \"a\":\n            return \"x >= d[0]\"\n        elif input.rb1() == \"b\":\n            return \"x <= d[0]\"\n        else:\n            return \"(x <= d[0]) | (x >= d[1])\" #TODO: dit moet nog aangepast worden voor tweezijdig\n\n    @reactive.Calc    \n    def dataset():\n        d = drempelwaarde()\n        x = np.random.binomial(input.n(), input.p_0(), input.n_sim())\n        y = np.where(eval(vlag_conditie()), 1, 0)\n        z = x/input.n()\n        df = pd.DataFrame({'waarden': x, 'proporties' : z, 'vlag':y})\n        return df\n    \n    @output\n    @render.data_frame\n    def out():\n        df = dataset()\n        return render.DataTable(df, row_selection_mode='multiple')\n\n    @reactive.Calc\n    def prop_view():\n        if input.x2():\n            return 'proporties'\n        else:\n            return 'waarden'\n\n\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        df = dataset()\n        plot = sns.histplot(data = df , x = prop_view(), hue='vlag', hue_order = [0,1],  palette=['skyblue', 'salmon'])\n        plot.set(title='Steekproevenverdeling', xlabel = 'Steekproefproporties', ylabel = 'Frequentie')\n        return plot\n\n    @output\n    @render.text\n    def empirical_p():\n        df = dataset()\n        mean = round(df['vlag'].mean(), 3)\n        return f'Empirische p-waarde is \"{mean}\"'\n    \napp = App(app_ui, server, debug=True)\n", "type": "text"}, {"name": "rsconnect-python/myapp.json", "content": "{\n    \"https://api.shinyapps.io\": {\n        \"server_url\": \"https://api.shinyapps.io\",\n        \"filename\": \"C:\\\\Users\\\\fraj\\\\SimulatieApplet\\\\myapp\",\n        \"app_url\": \"https://jeroenfrans.shinyapps.io/simulatieapplet/\",\n        \"app_id\": 10797445,\n        \"app_guid\": null,\n        \"title\": \"SimulatieApplet\",\n        \"app_mode\": \"python-shiny\",\n        \"app_store_version\": 1\n    }\n}", "type": "text"}]