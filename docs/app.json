[{"name": "app.py", "content": "\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom shiny import App, reactive, render, ui\nimport shinyswatch\n \nchoices = {\"a\": \"Eenzijdig rechts\", \"b\": \"Eenzijdig links\", \"c\": \"Tweezijdig\"}\n\napp_ui = ui.page_fluid(\n\n    ui.navset_tab_card(\n\n        ui.nav(\"Hypothesetest met proporties\",\n                ui.panel_title(\"Hypothesetest met proporties\"),\n    \n    \n                ui.layout_sidebar(\n                    ui.panel_sidebar(\n                        ui.input_numeric(\"n\", \"Steekproefgrootte\", 40),\n                        ui.input_slider(\"p_observed\", \"Geobserveerde steekproefproportie\", value=0.5, min=0, max=1),\n                        ui.input_slider(\"p_0\", \"Nulhypothese : p_0 = \", value=0.5, min=0, max=1),\n                        ui.input_numeric(\"n_sim\", \"Aantal simulaties onder nulhypothese\", 1000),\n                        ui.input_radio_buttons(\"rb1\", \"Type test\", choices),\n                        ),\n                    ui.panel_main(\n                        ui.row(\n                            ui.column(8, \n                                ui.output_plot(\"histogram_prop\"),\n                                ui.input_switch(\"x2\", \"Verander naar proporties\")\n                            ),\n                            ui.column(4,\n                                ui.output_text(\"txt1\"),\n                                ui.output_text(\"empirical_p_prop\"),\n                            ),\n                        ),\n            \n                        ui.row(\n                            ui.column(12, ui.output_data_frame(\"out\")),\n                        ),   \n                    ),\n                ),\n            ),\n        ui.nav(\"Hypothesetest met gemiddeldes\",\n               ui.panel_title(\"Hypothesetest met gemiddeldes\"),\n\n                ui.layout_sidebar(\n                    ui.panel_sidebar(\n                        ui.input_numeric(\"n_norm\", \"Steekproefgrootte\", 40),\n                        ui.input_numeric(\"mu_observed_norm\", \"Geobserveerde steekproefgemiddelde\", 0),\n                        ui.input_numeric(\"sigma_observed_norm\", \"Geobserveerde standaardafwijking\", 1, min=0.00001),\n                        ui.input_numeric(\"mu_0\", \"Nulhypothese : mu_0 = \", 0),\n                        ui.input_numeric(\"n_sim_norm\", \"Aantal simulaties onder nulhypothese\", 1000),\n                        ui.input_radio_buttons(\"rb2\", \"Type test\", choices),\n                        ),\n                    ui.panel_main(\n                        ui.row(\n                            ui.column(8, \n                                ui.output_plot(\"histogram_norm\"),\n                                #ui.input_switch(\"x2\", \"Verander naar proporties\")\n                            ),\n                            ui.column(4,\n                                #ui.output_text(\"txt1\"),\n                                #ui.output_text(\"empirical_p_prop\"),\n                            ),\n                        ),\n            \n                        ui.row(\n                            ui.column(12, ui.output_data_frame(\"out_norm\")),\n                        ),   \n                    ),\n                ),\n            ),\n    ),\n    # theme\n    #shinyswatch.theme_picker_ui(),\n   \n)\n\n\ndef server(input, output, session):\n    shinyswatch.theme.minty()\n\n    @reactive.Calc\n    def drempelwaarde_prop():\n        \"\"\"\n        Geeft de drempelwaarde terug afhankelijk van de gekozen radio button. De drempelwaarde is het aantal successen in de steekproef even extreem \n        of extremer dan de geobserveerde steekproefproportie. De drempelwaarde is afhankelijk van de gekozen radio button. \n        Bij een eenzijdige test is de drempelwaarde de geobserveerde steekproefproportie. Bij een tweezijdige test zijn er twee drempelwaarden: \u00e9\u00e9n gelijk aan de geobserveerde\n        steekproefproportie en \u00e9\u00e9n  symmetrisch t.o.v. de proportie onder de nulhypothese. Deze wordt berekend mbv 'distance' in de functie.\n\n       \"\"\"\n        distance = abs(input.p_0() - input.p_observed())\n        if input.rb1() == 'a' :\n            return [input.n()*input.p_observed()]\n        elif input.rb1() == 'b':\n            return [input.n()*input.p_observed()]\n        elif input.rb1() == \"c\":\n            return [input.n()*(input.p_0() - distance), input.n()*(input.p_0() + distance)]\n\n    @reactive.Calc\n    def drempelwaarde_norm():\n        \"\"\"\n        Geeft de drempelwaarde terug afhankelijk van de gekozen radio button. De drempelwaarde is het aantal successen in de steekproef even extreem \n        of extremer dan de geobserveerde steekproefproportie. De drempelwaarde is afhankelijk van de gekozen radio button. \n        Bij een eenzijdige test is de drempelwaarde de geobserveerde steekproefproportie. Bij een tweezijdige test zijn er twee drempelwaarden: \u00e9\u00e9n gelijk aan de geobserveerde\n        steekproefproportie en \u00e9\u00e9n  symmetrisch t.o.v. de proportie onder de nulhypothese. Deze wordt berekend mbv 'distance' in de functie.\n\n       \"\"\"\n        distance = abs(input.mu_0() - input.mu_observed_norm())\n        if input.rb2() == 'a' :\n            return [input.mu_observed_norm()]\n        elif input.rb2() == 'b':\n            return [input.mu_observed_norm()]\n        elif input.rb2() == \"c\":\n            return [input.mu_0() - distance, input.mu_0() + distance]\n\n\n    @output\n    @render.text\n    def txt1():\n        if len(drempelwaarde_prop()) == 2:\n            return f'Drempelwaarden zijn {np.round(drempelwaarde_prop()[0])} en {np.round(drempelwaarde_prop()[1])}'\n        else:\n            return f'Drempelwaarde is {np.round(drempelwaarde_prop()[0])}'\n        \n    \n    @reactive.Calc\n    def vlag_proportie():\n        \"\"\"\n        Returns the condition based on the selected radio button. d is treshold value in dataset and differs for \n        left, right and two sided test. Two sided test has two thresholds.\n\n        If the radio button 'a' is selected, the condition is 'x >= d'.\n        If the radio button 'b' is selected, the condition is 'x <= d'.\n        If button c is selected, the condition is 'x <= d[0]) | (x >= d[1]' where first is lower treshold and second is upper treshold.\n\n        Returns:\n            str: The condition based on the selected radio button.\n        \"\"\"\n        if input.rb1() == \"a\":\n            return \"x >= d[0]\"\n        elif input.rb1() == \"b\":\n            return \"x <= d[0]\"\n        else:\n            return \"(x <= d[0]) | (x >= d[1])\" \n        \n    @reactive.Calc\n    def vlag_norm():\n        \"\"\"\n        Returns the condition based on the selected radio button. d is treshold value in dataset and differs for \n        left, right and two sided test. Two sided test has two thresholds.\n\n        If the radio button 'a' is selected, the condition is 'x >= d'.\n        If the radio button 'b' is selected, the condition is 'x <= d'.\n        If button c is selected, the condition is 'x <= d[0]) | (x >= d[1]' where first is lower treshold and second is upper treshold.\n\n        Returns:\n            str: The condition based on the selected radio button.\n        \"\"\"\n        if input.rb2() == \"a\":\n            return \"x >= d[0]\"\n        elif input.rb2() == \"b\":\n            return \"x <= d[0]\"\n        else:\n            return \"(x <= d[0]) | (x >= d[1])\" \n\n    @reactive.Calc    \n    def dataset_proportie():\n        d = drempelwaarde_prop()\n        x = np.random.binomial(input.n(), input.p_0(), input.n_sim())\n        y = np.where(eval(vlag_proportie()), 1, 0)\n        z = x/input.n()\n        df = pd.DataFrame({'waarden': x, 'proporties' : z, 'vlag':y})\n        return df\n    \n    @reactive.Calc    \n    def dataset_norm():\n        d = drempelwaarde_norm()\n        se = input.sigma_observed_norm()/np.sqrt(input.n_norm())\n        x = np.random.normal(input.mu_0(), se, input.n_sim_norm())\n        y = np.where(eval(vlag_norm()), 1, 0)\n        df = pd.DataFrame({'Steekproefgemiddelden': x,  'vlag':y})\n        return df\n\n    \n    @output\n    @render.data_frame\n    def out():\n        df = dataset_proportie()\n        return render.DataTable(df, row_selection_mode='multiple')\n\n    @output\n    @render.data_frame\n    def out_norm():\n        df = dataset_norm()\n        return render.DataTable(df, row_selection_mode='multiple')\n\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram_prop():\n        df = dataset_proportie()\n        if input.x2():\n            plot = sns.histplot(data = df , x = 'proporties',bins='scott', alpha=1, hue='vlag', hue_order = [0,1], palette=['skyblue', 'salmon'])\n            plot.set(title='Steekproevenverdeling', xlabel = 'Steekproefproporties', ylabel = 'Frequentie')\n        else:\n            plot = sns.histplot(data = df , x = 'waarden', hue='vlag', hue_order = [0,1], discrete=True, palette=['skyblue', 'salmon'])\n            plot.set(title='Steekproevenverdeling', xlabel = 'Aantal successen in steekproef', ylabel = 'Frequentie')\n        return plot\n    \n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram_norm():\n        df = dataset_norm()\n        plot = sns.histplot(data = df , x = 'Steekproefgemiddelden', hue='vlag', hue_order = [0,1], palette=['skyblue', 'salmon'])\n        plot.set(title='Steekproevenverdeling', xlabel = 'Steekproefgemiddelden van gesimuleerde steekproeven', ylabel = 'Frequentie')\n        return plot\n    \n    \n\n    @output\n    @render.text\n    def empirical_p_prop():\n        df = dataset_proportie()\n        mean = round(df['vlag'].mean(), 3)\n        return f'Empirische p-waarde is \"{mean}\"'\n    \napp = App(app_ui, server, debug=True)\n", "type": "text"}, {"name": "rsconnect-python/myapp.json", "content": "{\n    \"https://api.shinyapps.io\": {\n        \"server_url\": \"https://api.shinyapps.io\",\n        \"filename\": \"/home/jeroen/SimulatieApplet/myapp\",\n        \"app_url\": \"https://jeroenfrans.shinyapps.io/simulatieapplet/\",\n        \"app_id\": 10797445,\n        \"app_guid\": null,\n        \"title\": \"SimulatieApplet\",\n        \"app_mode\": \"python-shiny\",\n        \"app_store_version\": 1\n    }\n}", "type": "text"}]